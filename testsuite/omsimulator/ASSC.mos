// name:     ASSC.mos
// status:   correct
// teardown_command: rm -rf Example_res.mat Example.log ASSCExample

setCommandLineOptions("-g=MetaModelica");
echo(false);

loadString("
function printStatus
  input Integer status;
  input Integer expected;
protected
  String outstatus;
  String cmp=\" \";
algorithm
  if (status==expected) then
    cmp := \"correct\";
  else
    cmp := \"wrong\";
  end if;
  if 0 == status then
    outstatus := \" ok\";
  elseif 1 == status then
    outstatus := \" warning\";
  elseif 3 == status then
    outstatus := \" error\";
  end if;
  print(\"status:  [\" + cmp  + \"]\" + outstatus);
  print(\"\n\");
end printStatus;");

oms_setCommandLineOption("--suppressPath=true --ignoreInitialUnknowns=true --stripRoot=true");
oms_setTempDirectory("./ASSCExample/");

oms_newModel("Example");
oms_addSystem("Example.root", OpenModelica.Scripting.oms_system.oms_system_wc);

// instantiate FMUs
oms_addSubModel("Example.root.Class1", "./resources/ASSCExample.Class1.fmu");
oms_addSubModel("Example.root.Class2", "./resources/ASSCExample.Class2.fmu");

// add connections
oms_addConnection("Example.root.Class1.max", "Example.root.Class2.max");

oms_setStopTime("Example", 6.0);
status := oms_setSolver("Example", OpenModelica.Scripting.oms_solver.oms_solver_wc_assc);
printStatus(status,0);

status := oms_setVariableStepSize("Example", 0.05, 0.05, 0.5);
printStatus(status,0);

status := oms_addEventIndicator("Example.root.Class1.max");
printStatus(status,0);
status := oms_addTimeIndicator("Example.root.Class1.eventTime");
printStatus(status,0);
status := oms_addStaticValueIndicator("Example.root.Class2.signalwiththreshold", 4.5, 5.0, 0.1);
printStatus(status,0);
status := oms_addDynamicValueIndicator("Example.root.Class2.signalwiththreshold", "Class1.closeToMax", "Class1.max", 0.05);
printStatus(status,0);

oms_instantiate("Example");
oms_initialize("Example");
oms_simulate("Example");
oms_terminate("Example");
oms_delete("Example");

status := oms_compareSimulationResults("Example_res.mat", "Example_res.mat", "Class2.signalwiththreshold", 0.0, 0.0);
print("test");
print(intString(status));
printStatus(status,1);

// Result:
// true
// status:  [correct] ok
// status:  [correct] ok
// status:  [correct] ok
// status:  [correct] ok
// status:  [correct] ok
// status:  [correct] ok
// info:    Result file: Example_res.mat (bufferSize=10)
// error:   [compareSeries] ResultReader::compareSeries: different values at time 2.300000
//          valueA: 2.300000, valueB: 2.000000
// testinfo:    0 warnings
// info:    1 errors
// endResult
